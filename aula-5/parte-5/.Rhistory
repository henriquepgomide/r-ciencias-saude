library("googleVis")
vignette("googleVis")
ncol  <-  32
idat  <- read.csv(file.choose(), header=TRUE, fill = TRUE, col.names = paste0("v", seq_len(ncol)), na.strings = c("NA",""), encoding = "UTF8")
head(idat)
names(idat)
cbind(names(idat))
idat$somaEscala  <- rowsum(idat[,12:32])
idat$somaEscala  <- rowSums(idat[,12:32], )
idat$somaEscala
names(idat)
idat$somaEscala  <- idat$v12 + idat$v13 + idat$v14 + idat$v15 + idat$v16 + idat$v17 + idat$v18 + idat$v19 + idat$v20 + idat$v21 + idat$v22 + idat$v23 + idat$v24 + idat$v25 + idat$v26 + idat$v27 + idat$v28 + idat$v29 + idat$v30 + idat$v31 + idat$v32
idat$somaEscala
idat$somaEscala  <- idat$v12 + idat$v13 + idat$v14 + idat$v15 + idat$v16 + idat$v17 + idat$v18 + idat$v19 + idat$v20 + idat$v21 + idat$v22 + idat$v23 + idat$v24 + idat$v25 + idat$v26 + idat$v27 + idat$v28 + idat$v29 + idat$v30 + idat$v31
idat$somaEscala
ncol  <-  31
idat  <- read.csv(file.choose(), header=TRUE, fill = TRUE, col.names = paste0("v", seq_len(ncol)), na.strings = c("NA",""), encoding = "UTF8")
idat$somaEscala  <- idat$v12 + idat$v13 + idat$v14 + idat$v15 + idat$v16 + idat$v17 + idat$v18 + idat$v19 + idat$v20 + idat$v21 + idat$v22 + idat$v23 + idat$v24 + idat$v25 + idat$v26 + idat$v27 + idat$v28 + idat$v29 + idat$v30 + idat$v31
idat$somaEscala
idat
head(idat)
ncol  <-  32
idat  <- read.csv(file.choose(), header=TRUE, fill = TRUE, col.names = paste0("v", seq_len(ncol)), na.strings = c("NA",""), encoding = "UTF8")
head(idat)
idat[,1]
cbind(idat[,1])
idatBruto  <- read.csv(file.choose(), header=TRUE, fill = TRUE, col.names = paste0("v", seq_len(ncol)), na.strings = c("NA",""), encoding = "UTF8")
idat  <- subset(idatBruto, idat$v1 < 37)
idat$v1
idat$v2
idat  <- idatBruto[1:36, 1:31]
idat
idat$somaEscala  <- idat$v12 + idat$v13 + idat$v14 + idat$v15 + idat$v16 + idat$v17 + idat$v18 + idat$v19 + idat$v20 + idat$v21 + idat$v22 + idat$v23 + idat$v24 + idat$v25 + idat$v26 + idat$v27 + idat$v28 + idat$v29 + idat$v30 + idat$v31
soma$Escala
idat$somaEscala
idat$trAnsiedade[idat$somaEscala < 33]  <- "baixo"
idat$trAnsiedade[idat$somaEscala >= 33 & idat$somaEscala <= 49 ]  <- "médio"
idat$trAnsiedade[idat$somaEscala > 49 ]  <- "alto"
idat$trAnsiedade
head(idat)
* Qual o n necessário?
library(pwr)
pwr.t.test(power=.8, sig.level=.05, type="paired-samples", d = 0.2)
pwr.t.test(power=.8, sig.level=.05, type="paired", d = 0.2)
library("epicalc", lib.loc="/home/hpgomide/R/x86_64-pc-linux-gnu-library/3.0")
n.for.2means (0, .5, 1, 1, ratio = 1, alpha = 0.05, power = 0.8)
sampleSize  <- n.for.2means(mu1 = 12, mu2 = 10.5, sd1 = 1, sd=1, alpha = 0.05, power = 0.8)
sampleSize$table
sampleSize$n1
sampleSize  <- n.for.2means(mu1 = 12, mu2 = 11.5, sd1 = 1, sd=1, alpha = 0.05, power = 0.8)
n.for.2means(mu1 = 12, mu2 = 11.5, sd1 = 1, sd=1, alpha = 0.05, power = 0.8)
grupoE  <- rnorm(n=64, mean= 11.5, sd = 1 ) # grupo experimental
grupoC <- rnorm(n=64, mean= 10.5, sd = 1 ) # grupo controle
t.test(grupoC ~ grupoE, paired = TRUE, var.equal = TRUE)
t.test(grupoC, grupoE, paired = TRUE, var.equal = TRUE)
t.test(grupoE, grupoC, paired = TRUE, var.equal = TRUE)
grupoE  <- rnorm(n=64, mean= 12.0, sd = 1 ) # grupo experimental
grupoC <- rnorm(n=64, mean= 11.5, sd = 1 ) # grupo controle
t.test(grupoE, grupoC, paired = TRUE, var.equal = TRUE)
grupoE  <- rnorm(n=64, mean= 12.0, sd = 1 ) # grupo experimental
grupoC <- rnorm(n=64, mean= 11.5, sd = 1 ) # grupo controle
t.test(grupoE, grupoC, paired = TRUE, var.equal = TRUE)
grupoE  <- rnorm(n=64, mean= 12.0, sd = 1 ) # grupo experimental
grupoC <- rnorm(n=64, mean= 11.5, sd = 1 ) # grupo controle
t.test(grupoE, grupoC, var.equal = TRUE) # teste t
grupoE  <- rnorm(n=64, mean= 12.0, sd = 1 ) # grupo experimental
grupoC <- rnorm(n=64, mean= 11.8, sd = 1 ) # grupo controle
t.test(grupoE, grupoC, var.equal = TRUE) # teste t
grupoE  <- rnorm(n=64, mean= 12.0, sd = 1 ) # grupo experimental
grupoC <- rnorm(n=64, mean= 11.5, sd = 1 ) # grupo controle
t.test(grupoE, grupoC, var.equal = TRUE) # teste t
grupoE  <- rnorm(n=64, mean= 12.0, sd = 1 ) # grupo experimental
grupoC <- rnorm(n=64, mean= 11.5, sd = 1 ) # grupo controle
t.test(grupoE, grupoC, var.equal = TRUE) # teste t
pwr.t.test(n=64, sig.level= 0.05, type= "two", alternative="two.sided", power= 0.8)
pwr.t.test(n=64, sig.level= 0.05, power= 0.8, type= "two", alternative="two.sided")
testeT  <- t.test(grupoE, grupoC, var.equal = TRUE) # teste t
t  <- testeT$statistic[[1]]
df  <- testeT$parameter[[1]]
r  <- sqrt(t^2/(t^2+df))
install.packages("~/Downloads/RGoogleAnalytics_1.3.tar.gz", repos = NULL, type = "source")
install.packages("rjson")
install.packages("~/Downloads/RGoogleAnalytics_1.3.tar.gz", repos = NULL, type = "source")
library(RGoogleAnalytics)
install.packages(file.chose(), repos = NULL, type = "source")
install.packages(file.choose(), repos = NULL, type = "source")
query <- QueryBuilder()
query <- QueryBuilder()
access_token <- query$authorize()
ga.profiles <- ga$GetProfileData(access_token)
ga <- RGoogleAnalytics()
ga.profiles <- ga$GetProfileData(access_token)
ga.profiles
query$Init(start.date = "2012-12-1",
end.date = "2013-08-27",
dimensions = "ga:date,ga:pagePath",
metrics = "ga:visits,ga:pageviews,ga:timeOnPage",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 99,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:date,ga:pagePath",
metrics = "ga:visits,ga:pageviews,ga:timeOnPage",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 99,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
# 4. Make a request to get the data from the API
ga.data <- ga$GetReportData(query)
head(ga.data)
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:date,ga:pagePath",
metrics = "ga:visits,ga:pageviews",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 99,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:date,ga:pagePath",
metrics = "ga:visits,ga:pageviews",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 10000,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
# 4. Make a request to get the data from the API
ga.data <- ga$GetReportData(query)
head(ga.data)
table(ga.data$pagePath)
table(ga.data$pagePath[1:5,])
table(ga.data$pagePath[1:5])
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:pagePath",
metrics = "ga:visits,ga:pageviews",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 10000,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
# 4. Make a request to get the data from the API
ga.data <- ga$GetReportData(query)
head(ga.data)
table(ga.data$pagePath)
# 3. Build the query string, use the profile by setting its index value
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:visitorType",
metrics = "ga:visits,ga:pageviews",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 10000,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
# 4. Make a request to get the data from the API
ga.data <- ga$GetReportData(query)
# 5. Look at the returned data
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:visitorType",
metrics = "ga:visits,ga:pageviews",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 10000,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:date,ga:pagePath,ga:country",
metrics = "ga:visits,ga:pageviews,ga:timeOnPage",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 10000,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
names(ga.data)
table(ga.data$pagePath)
clear
summary(ga.data$country)
summary(as.factor(ga.data$country))
names(ga.data)
str(date)
str(ga.data$date)
ga.data$data  <- as.Date(ga.data$date, "%Y%m$%d")
plot(ga.data)
plot(ga.data$data)
plot(table(ga.data$data))
barplot(ga.data$data)
barplot(table(ga.data$data)
)
ga.data$data
ga.data$data  <- as.Date(ga.data$date, "%Y/%m$/%d")
ga.data$data
?as.Date
ga.data$date
ga.data$data  <- as.Date(ga.data$date, "%Y%m%d")
ga.data$data
ga.data$date  <- as.Date(ga.data$date, "%Y%m%d")
library(ggplot2)
qplot(date, data = ga.data, geom = "freqpoly")
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:date,ga:pagePath,ga:country",
metrics = "ga:visits,ga:pageviews,ga:timeOnPage",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 50000,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
# 4. Make a request to get the data from the API
ga.data <- ga$GetReportData(query)
# 5. Look at the returned data
head(ga.data)
# Converting dates to R
ga.data$date  <- as.Date(ga.data$date, "%Y%m%d")
library(RGoogleAnalytics)
query <- QueryBuilder()
access_token <- query$authorize()
ga <- RGoogleAnalytics()
ga.profiles <- ga$GetProfileData(access_token)
# List the GA profiles
ga.profiles
query$Init(start.date = "2012-12-01",
end.date = "2013-08-27",
dimensions = "ga:date,ga:pagePath,ga:country",
metrics = "ga:visits,ga:pageviews,ga:timeOnPage",
sort = "ga:visits",
#filters="",
#segment="",
max.results = 50000,
table.id = paste("ga:",ga.profiles$id[1],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
head(ga.data)
library(ggplot2)
qplot(date, data = ga.data, geom = "freqpoly")
ga.data$date  <- as.Date(ga.data$date, "%Y%m%d")
qplot(date, data = ga.data, geom = "freqpoly")
graphAccess  <- ggplot(date, aes(date))
graphAccess  <- ggplot(ga.data, aes(date))
graphAcess + geom_freqpoly()
graphAccess + geom_freqpoly()
graphAccess + geom_freqpoly(colour = "blue")
graphAccess + geom_freqpoly(colour = "blue) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue") + labs(x = "Month", y = "Frequency")
names(ga.data)
graphAccess  <- ggplot(ga.data, aes(date))
graphAccess + geom_density(colour = "blue") + labs(x = "Month", y = "Frequency")
graphAccess  <- ggplot(ga.data, aes(date))
graphAccess + geom_freqpoly(colour = "blue") + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 1000) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 5) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 0.1) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 12) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 2) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 5) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 5) + labs(x = "Month", y = "Frequency")
graphAccess + geom_density(colour = "blue", fill=gear) + labs(x = "Month", y = "Frequency")
graphAccess + geom_density(colour = "blue", fill=date) + labs(x = "Month", y = "Frequency")
graphAccess + geom_density(colour = "blue", fill=date, alpha=I(.5)) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue") + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", xlim=c(0,12)) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = range/15 + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = range/15 + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = range/15) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 12) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 30) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 10) + labs(x = "Month", y = "Frequency")
graphAccess + geom_freqpoly(colour = "blue", binwidth = 10) + labs(x = "Month", y = "Frequency") + + xlim(0, 12)
graphAccess + geom_freqpoly(colour = "blue", binwidth = 10) + labs(x = "Month", y = "Frequency") + xlim(0,12)
format(ga.data$date, format = "%m")
format(ga.data$date, format = "%b")
names(format(ga.data$date, format = "%b"))
teste  <- format(ga.data$date, format = "%b")
names(teste)
levels(teste)
teste  <- as.character(format(ga.data$date, format = "%b"))
levels(teste)
teste  <- as.factor(format(ga.data$date, format = "%b"))
levels(teste)
graphAccess + geom_freqpoly(colour = "blue", binwidth = 10) + labs(x = "Month", y = "Frequency") + xlim(levels(as.factor(format(ga.data$date, format = "%b"))))
graphAccess + geom_freqpoly(colour = "blue", binwidth = 10) + labs(x = "Month", y = "Frequency")
graphCountry  <- ggplot(ga.data, aes(country))
graphCountry  + geom_bar()
barplot(table(ga.data$country))
summary(ga.data$country)
summary(as.factor(ga.data$country)
)
table(ga.data$country)
table(sort(ga.data$country), decreasing = TRUE)
sort(table(ga.data$country), decreasing = TRUE)
a  <- sort(table(ga.data$country), decreasing = TRUE)
a
a  <- as.list(sort(table(ga.data$country), decreasing = TRUE))
a
table.final  <- a[1:10]
table.final
table.final[[11]]  <- sum(a[11:45])
- a[11]
a[11]
a[11] + a[12]
a[[11] + a[[12]
a[[11] + a[[12]]
table.final  <- a[1:10]
barplot(table.final)
a.oper <- a[1:10]
table.country  <- as.array(a.oper)
table.country
table(sort(table(ga.data$country), decreasing = TRUE))
sort(table(ga.data$country), decreasing = TRUE)
barplot(sort(table(ga.data$country), decreasing = TRUE))
barplot(sort(table(ga.data$country), decreasing = TRUE), names.arg=c("Brazil", "Belarus", "Portugal"))
barplot(sort(table(ga.data$country), decreasing = TRUE))
height(table)
height(table(ga.data$country))
barplot(sort(table(ga.data$country), decreasing = TRUE), legend.text=(Brazil) )
barplot(sort(table(ga.data$country), decreasing = TRUE), legend.text=("Brazil") )
barplot(sort(table(ga.data$country), decreasing = TRUE), beside= TRUE )
barplot(sort(table(ga.data$country), decreasing = TRUE), beside= FALSE )
sort(table(ga.data$country), decreasing = TRUE)
cbind(sort(table(ga.data$country), decreasing = TRUE))
teset  <- cbind(sort(table(ga.data$country), decreasing = TRUE))
teste  <- cbind(sort(table(ga.data$country), decreasing = TRUE))
print(teste)
print(teste[1:5])
print(teste[teste>100])
teste  <- cbind(sort(table(ga.data$country > 100), decreasing = TRUE))
teste
print(teste[teste>100])
teste  <- cbind(sort(table(ga.data$country), decreasing = TRUE))
print(teste[teste>100])
teste
print(teste[teste>100])
subset(ga.data, country > 100)
ga.data$country
teste  <- subset(ga.data, country > 100)
table(teste)
table(teste$country)
graphAccess  <- ggplot(ga.data, aes(date))
graphAccess + geom_freqpoly(colour = "blue", binwidth = 10) + labs(x = "Month", y = "Frequency")
rm(teste)
rmteset
rm(teset)
?wilcox.test
dados  <- read.csv("~/Dropbox/cursos/r-psicologia/aula-4/autoestima.csv")
leveneTest(dados$somaescala, dados$v9)
leveneTest(dados$somaescala, dados$v9)
library(car)
leveneTest(dados$somaescala, dados$v9)
leveneTest(somaescala ~ v9, data = dados)
dados$v9
varA  <- rnorm(1000)
varB  <- rnorm(1000)
leveneTest(varA, varB)
varB  <- rep(1, 1000)
varB
varB  <- sample(1000, 2)
varB
varB  <- gl(2,500)
varB
leveneTest(varA, varB)
leveneTest(somaescala ~ v9, data = dados)
?t.test
View(ga.data)
head(ga.data)
library(ggplot2)
graphAccess  <- ggplot(ga.data, aes(date))
graphAccess + geom_freqpoly(colour = "blue", binwidth = 10) + labs(x = "Month", y = "Frequency")
setwd("~/Dropbox/bebermenos/sites/default/files/gwiaa_export")
files  <- list.files() #listing files
element  <- as.logical(rep(1, length(files))) #creating object to store elements
for (i in 1:length(files)) {
data <- read.csv(files[[i]])
dataNames  <- names(data)
element[i]  <- is.element("Client_Id", dataNames) | is.element("Client_id", dataNames) | is.element("client_id", dataNames) | is.element("client_ID", dataNames)
}
report  <- data.frame(files, element)
csvwId  <- subset(report, element == TRUE)
varNames  <- gsub("export_|.csv", "", csvwId$files) # picking goodnames for dataframes
for (j in 1:length(csvwId$files)) {
dfname  <- varNames[j]
assign(dfname, read.csv(as.character(csvwId[j, 1]), na.strings = c("NA","")))
}
names(user_logins)
names(user_logins_stats)
userLogins  <- merge(user_logins, user_logins_stats)
rm(userLogins)
names(user_logins)[1]<-paste("client_id")
names(user_logins)
names(user_logins)[2]<-paste("client_id")
names(user_logins)[1]<-paste("identificador")
merge(user_logins, user_logins_stats, by="client_id")
userLogins  <- merge(user_logins, user_logins_stats, by="client_id")
names(short_audit)
library(psych)
describe(short_audit)
head(short_audit)
setwd("~/hoje")
# Retrieving csvs with client_id column
files  <- list.files() #listing files
element  <- as.logical(rep(1, length(files))) #creating object to store elements
for (i in 1:length(files)) {
data <- read.csv(files[[i]])
dataNames  <- names(data)
element[i]  <- is.element("Client_Id", dataNames) | is.element("Client_id", dataNames) | is.element("client_id", dataNames) | is.element("client_ID", dataNames)
}
report  <- data.frame(files, element)
csvwId  <- subset(report, element == TRUE)
setwd("~/hoje/sites/default/files/gwiaa_export")
files  <- list.files() #listing files
element  <- as.logical(rep(1, length(files))) #creating object to store elements
for (i in 1:length(files)) {
data <- read.csv(files[[i]])
dataNames  <- names(data)
element[i]  <- is.element("Client_Id", dataNames) | is.element("Client_id", dataNames) | is.element("client_id", dataNames) | is.element("client_ID", dataNames)
}
report  <- data.frame(files, element)
csvwId  <- subset(report, element == TRUE)
varNames  <- gsub("export_|.csv", "", csvwId$files) # picking goodnames for dataframes
for (j in 1:length(csvwId$files)) {
dfname  <- varNames[j]
assign(dfname, read.csv(as.character(csvwId[j, 1]), na.strings = c("NA","")))
}
names(user_logins)[2]<-paste("client_id")
userLogins  <- merge(user_logins, user_logins_stats, by="client_id")
View(userLogins)
View(user_logins)
View(user_logins_stats)
View(evaluation_after6weeks)
View(rcq_motivation)
head(short_audit)
View(short_audit)
dim(short_audit)
boxplot(short_audit$score ~ short_audit$sex)
rFromWilcox
install.packages("clinfun")
library(libfun)
library(clinfun)
install.packages("pgirmess")
library(pgirmess)
library("pgirmess")
2.59/sqrt(19)
1.37/sqrt(19)
View(audit)
View(report)
View(audit)
View(short_audit)
View(rcq_motivation)
View(goals_above)
t.test
?t.test
t.test(somaescala ~ v9, data = dados)
t.test(somaescala ~ v9, data = dados)
dados  <- read.csv("~/Dropbox/cursos/r-psicologia/aula-4/autoestima.csv")
require(car)
t.test(somaescala ~ v9, data = dados)
testeT  <- t.test(somaescala ~ v9, data = dados)
testeT
t  <- ind.t.test$statistic[[1]]
t  <- testeT$statistic[[1]]
df  <- testeT$parameter[[1]]
r  <-  sqrt(t^2/(t^2+df))
round(r,3)
wilcox.test(somaescala ~ v9, data = dados)
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-5")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-4")
slidify("index.Rmd")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-3")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-1/slide")
publish_rpubs("Estatística inferencial")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-2/slide")
publish_rpubs("Testes de hipóteses")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-3/slide")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-3")
publish_rpubs("O tamanho do seu p importa")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-4")
publish_rpubs("Correlações bivariadas")
setwd("~/Dropbox/cursos/r-psicologia/aula-5/parte-5")
publish_rpubs("Testes t e seu amigo anormal w")
